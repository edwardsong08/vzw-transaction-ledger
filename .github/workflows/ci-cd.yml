name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-2
      ECR_REPOSITORY_URI: 795327773319.dkr.ecr.us-east-2.amazonaws.com/my-aws-app
      EC2_HOST: ec2-13-59-104-144.us-east-2.compute.amazonaws.com
      EC2_USER: ec2-user
      RDS_ENDPOINT: vzwledger-db.cdwoyc0kopqm.us-east-2.rds.amazonaws.com
      DB_NAME: vzwledger
      DB_USERNAME: vzwuser
      DB_PASSWORD: vzwpassword

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Build with Gradle (Skipping Tests)
      run: ./gradlew build -x test

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ${{ env.AWS_REGION }}

    - name: Build Docker Image
      run: docker build --no-cache -t my-aws-app:latest .

    - name: Tag Docker Image
      run: docker tag my-aws-app:latest ${{ env.ECR_REPOSITORY_URI }}:latest

    - name: Push Docker Image to ECR
      run: docker push ${{ env.ECR_REPOSITORY_URI }}:latest

    - name: Deploy to EC2
      env:
        # GitHub secret: EC2_KEY should contain your PEM file's contents.
        EC2_KEY_CONTENT: ${{ secrets.EC2_KEY }}
      run: |
        echo "$EC2_KEY_CONTENT" > ec2_key.pem
        chmod 600 ec2_key.pem
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          echo "Pulling new Docker image from ECR..."
          docker pull ${{ env.ECR_REPOSITORY_URI }}:latest
          echo "Stopping and removing existing container (if any)..."
          docker stop vzwledger_app || true
          docker rm vzwledger_app || true
          echo "Starting new container..."
          docker run -d --name vzwledger_app -p 80:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ env.DB_NAME }} \
            -e SPRING_DATASOURCE_USERNAME=${{ env.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ env.DB_PASSWORD }} \
            ${{ env.ECR_REPOSITORY_URI }}:latest
        EOF
